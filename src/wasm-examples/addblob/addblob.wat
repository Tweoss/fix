(module
  (type (;0;) (func (param i32 i32 i32)))
  (type (;1;) (func (param i32 i32)))
  (type (;2;) (func (param i32)))
  (type (;3;) (func (param externref i32)))
  (type (;4;) (func (param i32 externref)))
  (type (;5;) (func (param i32) (result externref)))
  (type (;6;) (func (param externref)))
  (type (;7;) (func (param externref i32) (result externref)))
  (import "env" "attach_tree" (func $attach_tree (type 3)))
  (import "env" "attach_blob" (func $attach_blob (type 3)))
  (import "env" "detach_mem" (func $detach_mem (type 5)))
  (import "env" "freeze_blob" (func $freeze_blob (type 7)))
  (memory $memzero 0)
  (memory $memone 0)
  (memory $memtwo 1)
  (table $ro_table 0 externref)
  (table $ro_handles 16 externref)
  (table $rw_handles 16 externref)
  (func (export "_fixpoint_apply") (param $encode externref) (result externref)
    (call $attach_tree (local.get $encode) (i32.const 0))
    (table.set $ro_handles (i32.const 1) (table.get $ro_table (i32.const 2)))
    (table.set $ro_handles (i32.const 2) (table.get $ro_table (i32.const 3)))
    (call $attach_blob (table.get $ro_handles (i32.const 1)) (i32.const 0)) 
    (call $attach_blob (table.get $ro_handles (i32.const 2)) (i32.const 1))
    i32.const 0
    (i32.add (i32.load 0 (i32.const 0)) (i32.load 1 (i32.const 0)))
    i32.store $memtwo
    (table.set $rw_handles (i32.const 0) (call $detach_mem (i32.const 0))) 
    (call $freeze_blob (table.get $rw_handles (i32.const 0)) (i32.const 4))
  )
  (table (;0;) 1 1 funcref)
  (export "ro_mem_0" (memory $memzero))
  (export "ro_mem_1" (memory $memone))
  (export "rw_mem_0" (memory $memtwo))
  (export "ro_table_0" (table $ro_table)) 
) 
